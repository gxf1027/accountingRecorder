<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context"   
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/context 
     http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
     http://www.springframework.org/schema/cache 
     http://www.springframework.org/schema/cache/spring-cache-4.0.xsd">
    
    <!-- <context:annotation-config/>   -->
    <!-- 引入redis配置 -->
    <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>
    
    <!-- Redis 配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
    	<!-- 连接池中最大连接数。高版本：maxTotal，低版本：maxActive -->
        <property name="maxTotal" value="${redis.pool.maxTotal}" />
        <!-- 连接池中最大空闲的连接数. -->
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <!-- 连接池中最少空闲的连接数. -->
        <property name="minIdle" value="${redis.pool.minIdle}" />
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
    </bean>
    
    <!-- config方式代替 cn.gxf.spring.struts.integrate.sysctr.SpringSessionConfiguration
                      使用xml方式sessionDestroyed无法触发，原因没有查到。因此改用config方式配置RedisHttpSessionConfiguration
     -->
    <!-- <bean id="mySessionListener" class="cn.gxf.spring.struts.integrate.sysctr.SessionListener">
    	<property name="redisTemplate" ref="stringRedisTemplate" />
    </bean>
    
    <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
    	<property name="maxInactiveIntervalInSeconds" value="600" />
    	<property name="httpSessionListeners">
            <list>
                <ref bean="mySessionListener" />
            </list>
        </property>
    </bean> -->

    <!-- redis单节点数据库连接配置 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.ip}" />
        <property name="port" value="${redis.port}" />
        <!-- 是否使用连接池. -->
        <property name="usePool" value="true" />
        <property name="poolConfig" ref="jedisPoolConfig" />
    </bean>
    
    <!-- 给spring security使用
     sessionRepository对象由RedisHttpSessionConfiguration生成，因RedisHttpSessionConfiguration带注释 @Configuration-->
	<bean id="sessionRegistry" class="org.springframework.session.security.SpringSessionBackedSessionRegistry">
	    <constructor-arg ref="sessionRepository"/>
	</bean>
	
	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	<bean id="kryoRedisSerializer" class="cn.gxf.spring.struts.integrate.sysctr.KryoRedisPoolingSerializer" />  
	<!-- redis模板 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">    
         <property name="connectionFactory" ref="jedisConnectionFactory" />
         <property name="keySerializer" ref="stringRedisSerializer" />
         <property name="valueSerializer" ref="kryoRedisSerializer" />
    </bean>
    
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>
    <!-- <cache:annotation-driven cache-manager="redisCacheManager" key-generator="userKeyGenerator" />  -->
    <!-- redis缓存 -->
	<!-- <bean id="redisCacheManager" class="org.springframework.cache.support.SimpleCacheManager">    
         <property name="caches">    
            <set>    
                这里可以配置多个redis  
                <bean class="cn.gxf.spring.struts.integrate.test.RedisCacheOperation">    
                     <property name="redisTemplate" ref="redisTemplate" />
                     name对应的名称要在类或方法的注解中使用      
                     <property name="name" value="dmRedisCache"/>    
                </bean>  
            </set>    
         </property>    
     </bean> -->
     
     

	<!-- 发布订阅 -->
    <bean id="redisMessageListener" class="cn.gxf.spring.struts.integrate.cache.RedisMessageListener">  
       <property name="listenerName" value="listener1" />
       <property name="redisTemplate" ref="redisTemplate"></property>  
       <property name="rpcRequestLogDao" ref="rpcRequestLogDao"></property>
       <property name="motanController" ref="motanController"></property>
	</bean> 
	<bean id="redisMessageListener_friend" class="cn.gxf.spring.struts.integrate.cache.RedisMessageListener">
	   <property name="listenerName" value="listener2" />  
       <property name="redisTemplate" ref="redisTemplate"></property>  
       <property name="rpcRequestLogDao" ref="rpcRequestLogDao"></property>
       <property name="motanController" ref="motanController"></property>
	</bean>
	  
	<bean id="topicContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer" destroy-method="destroy">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>  
        <property name="taskExecutor">
            <bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">  
                <property name="poolSize" value="3" />  
            </bean>  
        </property>  
        <property name="messageListeners">  
            <map>  
                <entry key-ref="redisMessageListener">  
                    <bean class="org.springframework.data.redis.listener.ChannelTopic">  
                        <constructor-arg value="${redis.topic1}"/>  
                    </bean>  
                </entry>  
                <entry key-ref="redisMessageListener_friend">
                	<bean class="org.springframework.data.redis.listener.ChannelTopic">  
                        <constructor-arg value="${redis.topic1}"/>  
                    </bean> 
                </entry>
            </map>  
        </property>  
	</bean>  
	
	<bean id="redisTopic4Motan" class="cn.gxf.spring.struts.integrate.cache.PseudoRedisTopic" >
		<property name="topicName" value="${redis.topic1}" />
	</bean>
	
</beans>